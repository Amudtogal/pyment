--- a/docstring.py
+++ b/docstring.py
@@ -23,10 +23,10 @@
 
 class DocsTools(object):
     '''This class provides the tools to manage several type of docstring.
-    Currently the following are managed:
-    - 'javadoc': javadoc style
-    - 'params': parameters on beginning of lines
-    - 'unknown': try all possibilities
+        Currently the following are managed:
+        - 'javadoc': javadoc style
+        - 'params': parameters on beginning of lines
+        - 'unknown': try all possibilities
 
     '''
     #TODO: enhance style dependent separation
@@ -36,14 +36,14 @@
     def __init__(self, style_in='javadoc', style_out='javadoc', params=None):
         '''Choose the kind of docstring type.
 
-        @param style_in: docstring input style ('javadoc', 'params', 'unknown')
+        @param style_in: docstring input style ('javadoc', 'params', 'unknown') (Default value = 'javadoc')
         @type style_in: string
-        @param style_out: docstring output style ('javadoc', 'params', 'unknown')
+        @param style_out: docstring output style ('javadoc', 'params', 'unknown') (Default value = 'javadoc')
         @type style_out: string
-        @param params: if known the parameters names that should be found in the docstring.
+        @param params: if known the parameters names that should be found in the docstring. (Default value = None)
         @type params: list
 
-        '''
+'''
         self.style = {'in': style_in,
                       'out': style_out}
         self.opt = {}
@@ -53,16 +53,16 @@
 
     def _set_available_options(self):
         '''Sets the internal styles list and available options in a structure as following:
-
-            param: javadoc: name = '@param'
-                            sep  = ':'
-                   reST:    name = ':param'
-                            sep  = ':'
-                   ...
-            type:  javadoc: name = '@type'
-                            sep  = ':'
-                   ...
-            ...
+        
+                    param: javadoc: name = '@param'
+                                    sep  = ':'
+                           reST:    name = ':param'
+                                    sep  = ':'
+                           ...
+                    type:  javadoc: name = '@type'
+                                    sep  = ':'
+                           ...
+                    ...
 
         '''
         options_keystyle = {'keys': ['param', 'type', 'return', 'rtype', 'raise'],
@@ -82,21 +82,25 @@
         '''Gets the list of keywords for a particular style
 
         @param style: the style that the keywords are wanted
-
+        
         '''
         return [self.opt[o][style]['name'] for o in self.opt]
 
     def get_key(self, key):
         '''Get the name of a key in current style.
-        e.g.: in javadoc style, the returned key for 'param' is '@param'
-
-        @param key: the key wanted (param, type, return, rtype,..)
+                e.g.: in javadoc style, the returned key for 'param' is '@param'
+
+        @param key: 
+
         '''
         return self.opt[key][self.style['in']]['name']
 
     def get_sep(self, key='param'):
         '''Get the separator of current style.
-        e.g.: in javadoc style, it is ":"
+                e.g.: in javadoc style, it is ":"
+
+        @param key: 
+        @type key: 'param'
 
         '''
         return self.opt[key][self.style['in']]['sep']
@@ -106,16 +110,15 @@
 
         @param params: the docstring parameters names
         @type params: list
-        '''
+'''
         self.params = params
 
     def get_elem_key_index(self, data, key, starting=True):
         '''Get from a docstring the next option with a given key.
 
         @param data: string to parse
-        @param starting: does the key element must start the line
+        @param starting: does the key element must start the line (Default value = True)
         @param key: the key category. Can be 'param', 'type', 'return', ...
-        @type starting: boolean
         @return: index of found element else -1
         @rtype: integer
 
@@ -150,11 +153,11 @@
 
     def get_elem_index(self, data, starting=True):
         '''Get from a docstring the next option.
-        In javadoc style it could be @param, @return, @type,...
-
-        @param data: string to parse
-        @param starting: does the key element must start the line
-        @type starting: boolean
+                In javadoc style it could be @param, @return, @type,...
+
+        @param data: 
+        @param starting: 
+        @type starting: True
         @return: index of found element else -1
         @rtype: integer
 
@@ -169,6 +172,13 @@
         return idx
 
     def old_get_elem_index(self, data, starting=True):
+        '''
+
+        @param data: 
+        @param starting: 
+        @type starting: True
+
+        '''
         idx = len(data)
         for opt in self._get_options(self.style['in']):
             if opt in data:
@@ -181,12 +191,12 @@
 
     def get_param_indexes(self, data):
         '''Get from a docstring the next parameter name indexes.
-        In javadoc style it is after @param.
-
-        @param data: string to parse
+                In javadoc style it is after @param.
+
+        @param data: 
         @return: start and end indexes of found element else (-1, -1)
-        or else (-2, -2) if try to use params style but no parameters were provided.
-        Note: the end index is the index after the last name character
+or else (-2, -2) if try to use params style but no parameters were provided.
+Note: the end index is the index after the last name character
         @rtype: tuple
 
         '''
@@ -222,10 +232,11 @@
 
     def get_param_description_indexes(self, data, prev=None):
         '''Get from a docstring the next parameter's description.
-        In javadoc style it is after @param.
-
-        @param data: string to parse
-        @param prev: index after the param element name
+                In javadoc style it is after @param.
+
+        @param data: 
+        @param prev: 
+        @type prev: None
         @return: start and end indexes of found element else (-1, -1)
         @rtype: tuple
 
@@ -256,14 +267,14 @@
 
     def get_param_type_indexes(self, data, name=None, prev=None):
         '''Get from a docstring a parameter type indexes.
-        In javadoc style it is after @type.
+                In javadoc style it is after @type.
 
         @param data: string to parse
-        @param name: the name of the parameter
-        @param prev: index after the previous element (param or param's description)
+        @param name: the name of the parameter (Default value = None)
+        @param prev: index after the previous element (param or param's description) (Default value = None)
         @return: start and end indexes of found element else (-1, -1)
-        Note: the end index is the index after the last included character or -1 if
-        reached the end
+Note: the end index is the index after the last included character or -1 if
+reached the end
         @rtype: tuple
 
         '''
@@ -294,12 +305,12 @@
 
     def get_return_description_indexes(self, data):
         '''Get from a docstring the return parameter description indexes.
-        In javadoc style it is after @return.
+                In javadoc style it is after @return.
 
         @param data: string to parse
         @return: start and end indexes of found element else (-1, -1)
-        Note: the end index is the index after the last included character or -1 if
-        reached the end
+Note: the end index is the index after the last included character or -1 if
+reached the end
         @rtype: tuple
 
         '''
@@ -338,12 +349,12 @@
 
     def get_return_type_indexes(self, data):
         '''Get from a docstring the return parameter type indexes.
-        In javadoc style it is after @rtype.
+                In javadoc style it is after @rtype.
 
         @param data: string to parse
         @return: start and end indexes of found element else (-1, -1)
-        Note: the end index is the index after the last included character or -1 if
-        reached the end
+Note: the end index is the index after the last included character or -1 if
+reached the end
         @rtype: tuple
 
         '''
@@ -369,15 +380,18 @@
 
 
 class DocString(object):
-    '''This class represents the docstring'''
+    '''This class represents the docstring
+
+    '''
 
     def __init__(self, elem_raw, spaces='', docs_raw=None):
         '''
+
         @param elem_raw: raw data of the element (def or class).
-        @param spaces: the leading whitespaces before the element
+        @param spaces: the leading whitespaces before the element (Default value = '')
         @param docs_raw: the raw data of the docstring part if any.
-
-        '''
+        
+        ''' (Default value = None)
         self.dst = DocsTools()
         self.element = {}
         self.element['raw'] = elem_raw
@@ -412,6 +426,9 @@
         self.parse_element()
 
     def __str__(self):
+        '''
+
+        '''
         txt = "\n\n** " + str(self.element['name'])
         txt += ' of type ' + str(self.element['type']) + ':'
         txt += str(self.docs['in']['desc']) + '\n'
@@ -420,18 +437,21 @@
         return txt
 
     def __repr__(self):
+        '''
+
+        '''
         return self.__str__()
 
     def parse_element(self, raw=None):
         '''Parses the element's elements (type, name and parameters) :)
-        e.g.: def methode(param1, param2='default')
-            def                      -> type
-            methode                  -> name
-            param1, param2='default' -> parameters
+                e.g.: def methode(param1, param2='default')
+                    def                      -> type
+                    methode                  -> name
+                    param1, param2='default' -> parameters
 
         @param raw: raw data of the element (def or class).
-
-        '''
+        
+        ''' (Default value = None)
         #TODO: retrieve return from element external code (in parameter)
         #TODO: manage multilines
         if raw is None:
@@ -465,7 +485,9 @@
         self.parsed_elem = True
 
     def _extract_docs_description(self):
-        '''Extract main description from docstring'''
+        '''Extract main description from docstring
+
+        '''
         #FIXME: the indentation of descriptions is lost
         data = self.docs['in']['raw'].strip()
         if data.startswith('"""') or data.startswith("'''"):
@@ -482,7 +504,7 @@
 
     def _extract_docs_params(self):
         '''Extract parameters description and type from docstring. The internal computed parameters list is
-        composed by tuples (parameter, description).
+                composed by tuples (parameter, description).
 
         '''
         #FIXME: the indentation of descriptions is lost
@@ -517,6 +539,7 @@
 
     def _extract_docs_return(self):
         '''Extract return description and type
+
         '''
         data = '\n'.join([d.strip() for d in self.docs['in']['raw'].split('\n')])
         start, end = self.dst.get_return_description_indexes(data)
@@ -536,8 +559,8 @@
         '''Parses the docstring
 
         @param raw: the data to parse if not internally provided
-
-        '''
+        
+        ''' (Default value = None)
         if raw is not None:
             self.docs['in']['raw'] = raw
         if self.docs['in']['raw'] is None:
@@ -550,6 +573,7 @@
 
     def _set_desc(self):
         '''Sets the global description if any
+
         '''
         if self.docs['in']['desc']:
             self.docs['out']['desc'] = self.docs['in']['desc']
@@ -558,6 +582,7 @@
 
     def _set_params(self):
         '''Sets the parameters with return types, descriptions and default value if any
+
         '''
         if len(self.docs['in']['params']) > 0:
             self.docs['out']['params'] = list(self.docs['in']['params'])
@@ -582,6 +607,7 @@
 
     def _set_return(self):
         '''Sets the return parameter with description and rtype if any
+
         '''
         #TODO: manage return retrieved from element code (external)
         self.docs['out']['return'] = self.docs['in']['return']
@@ -589,6 +615,7 @@
 
     def _set_raw(self):
         '''Sets the raw docstring
+
         '''
         #TODO: make it no style dependent
         sep = self.dst.get_sep()
@@ -624,6 +651,7 @@
 
     def generate_docs(self):
         '''
+
         '''
         self._set_desc()
         self._set_params()
@@ -633,6 +661,7 @@
 
     def get_raw_docs(self):
         '''Generates raw docstring
+
         '''
         if not self.generated_docs:
             self.generate_docs()
