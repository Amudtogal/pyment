--- a/./pyment.py
+++ b/./pyment.py
@@ -30,25 +30,25 @@
 
 
 class PyComment(object):
-    '''This class allow to manage several python scripts docstrings.
+    """This class allow to manage several python scripts docstrings.
     It is used to parse and rewrite in a Pythonic way all the functions', methods' and classes' docstrings.
     The changes are then provided in a patch file.
 
-    '''
+    """
     def __init__(self, input_file, input_style=None, output_style='reST', param_type='standard', cotes="'''"):
-        '''Sets the configuration including the source to proceed and options.
-
-        @param input_file: path name (file or folder)
-        @param input_style: the type of doctrings format of the output. By default, it will
+        """Sets the configuration including the source to proceed and options.
+
+        :param input_file: path name (file or folder)
+        :param input_style: the type of doctrings format of the output. By default, it will
         autodetect the format for each docstring.
-        @param output_style: the docstring docstyle to generate.
-        @param param_type: the type of parameters format. Can be:
+        :param output_style: the docstring docstyle to generate. (Default value = 'reST')
+        :param param_type: the type of parameters format. Can be:
             - standard:
                 The style used is the javadoc style.
-                e.g.: @ param my_param: the description
-        @param cotes: the type of cotes to use for output: ' ' ' or " " "
-
-        '''
+                e.g.: @ param my_param: the description (Default value = 'standard')
+        :param cotes: the type of cotes to use for output: ' ' ' or " " " (Default value = "'''")
+
+        """
         self.file_type = '.py'
         self.filename_list = []
         self.input_file = input_file
@@ -62,9 +62,7 @@
         self.cotes = cotes
 
     def _parse(self):
-        '''Parses the input file's content and generates a list of its elements/docstrings.
-
-        '''
+        """Parses the input file's content and generates a list of its elements/docstrings."""
         #TODO manage decorators
         #TODO manage default params with strings escaping chars as (, ), ', ', #, ...
         #TODO manage multilines
@@ -152,12 +150,13 @@
         return elem_list
 
     def get_output_docs(self):
-        '''Return the output docstrings once formated
-
-        @return: the formated docstrings
-        @rtype: list
-
-        '''
+        """Return the output docstrings once formated
+
+        :returns: the formated docstrings
+
+        :rtype: list
+
+        """
         if not self.parsed:
             self._parse()
         lst = []
@@ -166,16 +165,18 @@
         return lst
 
     def diff(self, source_path='', target_path='', which=-1):
-        '''Build the diff between original docstring and proposed docstring.
-
-        @param which: indicates which docstring to proceed:
+        """Build the diff between original docstring and proposed docstring.
+
+        :param which: indicates which docstring to proceed:
         -> -1 means all the dosctrings of the file
-        -> >=0 means the index of the docstring to proceed
-        @type which: int
-        @return: the resulted diff
-        @rtype: string
-
-        '''
+        -> >=0 means the index of the docstring to proceed (Default value = -1)
+        :type which: int
+        :param source_path:  (Default value = '')
+        :param target_path:  (Default value = '')
+        :returns: the resulted diff
+        :rtype: string
+
+        """
         #TODO: manage which
         if not self.parsed:
             self._parse()
@@ -215,16 +216,20 @@
         return [d for d in diff_list]
 
     def diff_to_file(self, patch_file, source_path='', target_path=''):
-        '''
-        '''
+        """
+
+        :param patch_file: 
+        :param source_path:  (Default value = '')
+        :param target_path:  (Default value = '')
+
+        """
         diff = self.diff(source_path, target_path)
         f = open(patch_file, 'w')
         f.writelines(diff)
         f.close()
 
     def proceed(self):
-        '''
-        '''
+        """ """
         self._parse()
         for e in self.docs_list:
             e['docs'].generate_docs()
@@ -240,15 +245,15 @@
 
 
 def get_files_from_dir(path, recursive=True, depth=0, file_ext='.py'):
-    '''Retrieve the list of files from a folder.
-
-    @param path: file or directory where to search files
-    @param recursive: if True will search also sub-directories
-    @param depth: if explore recursively, the depth of sub directories to follow
-    @param file_ext: the files extension to get. Default is '.py'
-    @return: the file list retrieved. if the input is a file then a one element list.
-
-    '''
+    """Retrieve the list of files from a folder.
+
+    :param path: file or directory where to search files
+    :param recursive: if True will search also sub-directories (Default value = True)
+    :param depth: if explore recursively, the depth of sub directories to follow (Default value = 0)
+    :param file_ext: the files extension to get. Default is '.py'
+    :returns: the file list retrieved. if the input is a file then a one element list.
+
+    """
     file_list = []
     if os.path.isfile(path):
         return [path]
@@ -266,6 +271,13 @@
 
 
 def main(files=[], input_style='auto', output_style='reST'):
+    """
+
+    :param files:  (Default value = [])
+    :param input_style:  (Default value = 'auto')
+    :param output_style:  (Default value = 'reST')
+
+    """
     input_style = None if 'auto' else input_style
     for f in files:
         if os.path.isdir(source):
